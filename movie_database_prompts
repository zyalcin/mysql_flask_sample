use movie_lens_db;

/* This SQL code returns (prints) the 
the titles of all movies released in 2010. Sorts them by title. */ 

select title
from movie 
where title like '%(2010%' 
order by title asc;


use movie_lens_db;

/* An example batch file. This SQL code returns (prints) the 
lists the titles and genres of all comedies released in 2010.
A movie that is both a comedy and a drama is listed. 
It is sorted by genre and title. */ 

select title, genres 
from movie 
where genres like '%Comedy%'  and title like '%(2010%' 
order by genres asc, title asc;


use movie_lens_db;

/* This SQL code returns (prints) the 
the  the userId, movieID, and titles of
all movies where the user rated the movie with 5 stars. 
Sorts by title and userid.. */ 

select userId, movie.movieId, title 
from movie, rating
where rating.movieId = movie.movieId and rating.rating in (5) 
order by title asc, userId asc;

use movie_lens_db;

/* This SQL code returns (prints) the 
the title and rating of all movies rated by 
the user with id 610. 
Sorts by rating (descending, so 5 stars first) and then by title (ascending). */ 

select title, rating  
from movie, rating  
where movie.movieId = rating.movieId and userId = 610 
order by rating desc, title asc;

use movie_lens_db;

/* This SQL code returns (prints) the 
title and average rating of all movies released in 2010.
Sorts by title. */ 

select title, avg(rating)  
from movie, rating 
where movie.movieId = rating.movieId and title like '%(2010%' 
group by movie.movieId 
order by title; 

use movie_lens_db;

/* This SQL code returns (prints) the 
titles and average rating of movies from 2010 where the average
is at least a 3.0. Sorts by title. */ 

select title, avg(rating)  
from movie, rating  where movie.movieId = rating.movieId and title like '%(2010%'  
group by rating.movieId  
having avg(rating) >= 3 
order by title;

use movie_lens_db;

/* This SQL code returns (prints) the 
titles of movies with no ratings at all. Sorts by title. */ 

select title from movie  
where movie.movieID not in (select movieId from rating)
order by title; 

use movie_lens_db;

/* This SQL code returns (prints) the 
movies with a range of ratings of at least 3 
and based on at least 10 ratings. That is, the 
query needs to find the lowest rating (say, 1 star)
and the highest (say, 5 stars, which makes 
for a range of 4) and list only those movies where
the range is at least 3, based on at least 10 ratingse.
Sorts by decreasing range and increasing title  */

select title, max(rating)-min(rating) as rating_range 
from movie inner join rating using (movieId)
group by movieId
having count(rating) >= 10 and rating_range >=3 
order by rating_range desc, title 
;


use wmdb; 

select distinct name, title  
from person, movie, credit
where person.nm = credit.nm 
    and credit.tt = movie.tt
    and director = (
        select nm 
        from person 
        where name = 'Ang Lee')
order by title, name 
;



